package main

import (
	"bytes"
	"path"
	"flag"
	"fmt"
	"log"
	"os"
	"io"
	"strconv"
	"strings"
	"text/template"
	"unicode"
	"go/parser"
	"go/printer"
	"go/token"
	"golang.org/x/tools/imports"


	dataPkg {{quote .DataPkg}}
	templatePkg {{quote .TemplatePkg}}
)

func NewLineWriter(writer io.Writer) io.Writer {
	return &LineWriter{Writer: writer}
}

type LineWriter struct {
	line int
	io.Writer
}


func (x *LineWriter) Write(p []byte) (n int, err error) {
	last := 0
	if x.line == 0 {
		x.line++
		n1, err := x.Writer.Write([]byte(strconv.Itoa(x.line)+":"))
		n += n1
		if err != nil {
			return n, err
		}
	}
	for i := 0; i < len(p); i++ {
		if p[i] == byte('\n') {
			x.line++
			n1, err := x.Writer.Write(p[last:i+1])
			n += n1
			if err != nil {
				return n, err
			}
			last = i+1
			n1, err = x.Writer.Write([]byte(strconv.Itoa(x.line) + ":"))
			n += n1
			if err != nil {
				return n, err
			}
		}
	}
	if last < len(p) {
		n1, err := x.Writer.Write(p[last:len(p)])
		n += n1
		if err != nil {
			return n, err
		}
	}
	return n, nil
}


type Data struct {
	{{.PtrStar}}templatePkg.{{.TemplateStruct}}
	GCommentPrefix string
	GTags string
	GTemplateTags string
	GFilename string
	GLine int
	GFilePath string
	GPackagePath string
	GPackage string
	GTemplateStruct string
	GTemplatePackage string
	GTemplateFilename string
	GGeneratedFilename string
}

func reset(in interface{}) {
	if r, isR := in.(interface{Reset()}); isR {
		r.Reset()
	}
}

func setInit(templater interface{}, i interface{}) error {
	if i, is := i.(interface {
		Init(interface{}) error
	}); is {
		return i.Init(templater)
	}
	return nil
}

func (d Data) GetGFilePath() string {
    return d.GFilePath
}

func main() {
	var override bool
	flag.BoolVar(&override, "override", false, "override already generated file")
	flag.Parse()

	outputDir := "{{.WorkingDirectory}}"
	filename := "{{.GeneratedFilename}}"


    data := dataPkg.{{.ValueGetter}}
    reset(&data)

	// populate the template object
	templateData := &Data{
	    {{.TemplateStruct}}: data,
	    GCommentPrefix: {{GoValue .CommentPrefix }},
	    GTags: {{GoValue .Tags }},
	    GTemplateTags: {{GoValue .TemplateTags }},
        GFilename: {{GoValue .Filename }},
        GLine: {{GoValue .Line }},
        GFilePath: {{GoValue .DataPkg }},
        GPackagePath: {{GoValue .PackagePath }},
        GPackage: {{GoValue .Package }},
        GTemplateStruct: {{GoValue .TemplateStruct }},
        GTemplatePackage: {{GoValue .TemplatePkg }},
        GTemplateFilename: {{GoValue .TemplateFilename }},
        GGeneratedFilename: {{GoValue .GeneratedFilename }},
	}

    if err := setInit(templateData, data); err != nil {
       	log.Fatal(err)
       	return
    }

	funcMap := template.FuncMap{
		"Filename": func(name string) string {
			filename = fmt.Sprintf("%s_%s.go",
                strings.TrimSuffix(templateData.GFilename, path.Ext(templateData.GFilename)),
			    strings.Replace(name, "\n", " ", 0),
			)
			return name
		},
		"AbsoluteFilename": func(name string) string {
			filename = strings.Replace(name, "\n", " ", 0)
			return name
		},
		"GoValue": func(value interface{}) string {
			return fmt.Sprintf("%#v", value)
		},
		"ToUpper": strings.ToUpper,
		"ToLower": strings.ToLower,
		"FirstToLower": firstLower,
		"FirstToUpper": firstUpper,
	}

	var forget interface{}
	forget = data

	funcMapper, ok := forget.(interface{ CustomFuncMap() template.FuncMap })
	if ok {
		for s, f := range funcMapper.CustomFuncMap() {
			funcMap[s] = f
		}
	}

	tmpl, err := template.New("template").Funcs(funcMap).Parse(data.Template())
	if err != nil {
		log.Fatal(err)
	}

	buf := &bytes.Buffer{}
   	if templateData.GCommentPrefix != "" {
        fmt.Fprintf(buf, "%s +build %s\n", templateData.GCommentPrefix, templateData.GTemplateTags)
        fmt.Fprintf(buf, "%s Code generated by \"templater\"; DO NOT EDIT.\n\n", templateData.GCommentPrefix)
    }
	if err := tmpl.Execute(buf, templateData); err != nil {
		log.Fatal(err)
		return
	}

	exists, err := fileExists(path.Join(outputDir, filename))
	if exists && err != nil {
		log.Fatal(err)
		return
	}
	if exists && !override {
		return
	}
	if !strings.HasSuffix(filename, ".go") {
		err = writeOutput(filename, outputDir, buf.Bytes())
		if err != nil {
			log.Fatal(err)
			return
		}

		return
	}


	generatedFset := token.NewFileSet()
   	if err != nil {
   		log.Fatal(err)
   		return
   	}

    generatedFileAst, err := parser.ParseFile(generatedFset, "", buf, parser.ParseComments)
    if err != nil {
        NewLineWriter(os.Stdout).Write(buf.Bytes())
    	log.Fatal(err)
    	return
    }
   	generatedFileAst.Name.Name = templateData.GPackage
   	generatedBuf := &bytes.Buffer{}
   	if err := printer.Fprint(generatedBuf, generatedFset, generatedFileAst); err != nil {
   		log.Fatal(err)
   		return
   	}

	formatted, err := imports.Process("", generatedBuf.Bytes(), nil)
	if err != nil {
		NewLineWriter(os.Stdout).Write(generatedBuf.Bytes())
		log.Fatal(err)
		return
	}

	err = writeOutput(filename, outputDir, formatted)
	if err != nil {
		log.Fatal(err)
		return
	}
}

func firstLower(s string) string {
	a := []rune(s)
	a[0] = unicode.ToLower(a[0])
	return string(a)
}

func firstUpper(s string) string {
	a := []rune(s)
	a[0] = unicode.ToUpper(a[0])
	return string(a)
}

func writeOutput(filename, outputDir string, b []byte) error {
	fmt.Printf("%s\n", path.Join(outputDir, filename))

	outputFile, err := os.Create(path.Join(outputDir, filename))
	if err != nil {
		return err
	}
	defer outputFile.Close()
	outputFile.Write(b)

	return nil
}

func fileExists(name string) (bool, error) {
  _, err := os.Stat(name)
  if os.IsNotExist(err) {
    return false, nil
  }
  return err == nil, err
}